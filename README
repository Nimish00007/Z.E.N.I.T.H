# 🌌 ZENITH – An AI Voice Based Intelligent Agent Powered by LLMs

**ZENITH** is an intelligent **AI-driven voice assistant** built in Python that combines **speech recognition, natural language processing, and large language models (LLMs)** to deliver an interactive, voice-controlled experience.  
This project was developed in **1 month** as a showcase of **end-to-end software development skills** – from system design to deployment.

---

## ✨ Features

- 🎙 **Voice Authentication** – Multi-step voice verification for secure access  
- 🧠 **LLM Integration** – Uses a large language model for intelligent, context-aware responses  
- 📩 **Email Automation** – Authenticate and send/read emails with voice commands  
- 📊 **Interactive Reports** – Generates formatted project reports & interview prep docs  
- 🎵 **Voice Commands** – Execute tasks hands-free (e.g., open apps, search, play audio)  
- 🔑 **Credential Management** – Secure token handling & environment-based secrets  
- ⚡ **Build Automation** – Packaged into executable format for easy distribution  

---

## 🏗 Tech Stack

- **Language:** Python 3.12  
- **AI/NLP:** OpenAI/LLM integration  
- **Voice Processing:** SpeechRecognition, PyAudio  
- **Authentication:** Google OAuth, Voice biometrics  
- **Build Tools:** PyInstaller  
- **Other Libraries:** `os`, `json`, `wave`, `tkinter`, etc.  

---

## 📂 Project Structure

ZENITH/
│── ZENITH.py # Main application
│── voice_auth.py # Voice authentication logic
│── record_voice.py # Voice recording script
│── LLM.py # LLM integration module
│── gmail_auth.py # Email authentication
│── build/ # Generated executables
│── docs/ # Documentation & reports
│── assets/ # Icons, audio files
│── .env # Environment variables (ignored in Git)
│── requirements.txt # Dependencies

##🎯 Key Learning Outcomes

Built a production-ready Python application in 1 month

Implemented voice recognition + authentication pipelines

Integrated Large Language Models into real software

Managed secure credentials using .env + .gitignore

Packaged Python apps into executables with PyInstaller

Worked with APIs (Google, OpenAI) and OAuth authentication

Practiced GitHub best practices (branching, commit hygiene, push protection, large file handling)

##Further Work On GO:
🔮 Enhancements

🌐 Web-based UI (Flask/FastAPI + React frontend)

📱 Mobile client integration

🤖 Multi-LLM orchestration (RAG pipelines, hybrid AI)

☁️ Cloud deployment with Docker & CI/CD pipelines
